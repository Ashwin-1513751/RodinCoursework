machine m0_cabins
sees cabin_context
variables
	cabin
	floor
	inBetweenFloorStatus
invariants
	@typeof_cabin: cabin ⊆ CABINS  //REQ 1 The system manages a set of cabins.
	@typeof_floor: floor ∈ cabin → FLOORS //REQ 5 There are a fixed number of floors
	@typeof_inBetweenFloorStatus: inBetweenFloorStatus ∈ cabin → INBETWEENFLOORSTATUS
events
	event INITIALISATION
	then
		@init_floor: floor ≔ ∅
		@init_cabin: cabin ≔ ∅
		@init_inBetweenFloorStatus: inBetweenFloorStatus ≔ ∅
	end

	event CabinLeavesFloorGoingUp
	any
		c
		f
	where
		@grd1: c ∈ cabin
		@grd2: c ∈ dom (floor)
		@grd3: f ∈ FLOORS
		@grd4: f = floor(c)
		@grd5: f ≠ TOP_FLOOR
		@grd6: inBetweenFloorStatus (c) = ATFLOOR
	then
		@act1: floor (c) ≔ f + 1
		// REQ 10 In between leaving a floor (to go up or down) and reaching another floor, a cabin is in between the two floors.
		@act2: inBetweenFloorStatus (c) ≔ INBETWEENFLOOR 
	end

	event CabinReachesFloorGoingUp
	any
		c
	where
		@grd1: c ∈ cabin
		@grd2: c ∈ dom (inBetweenFloorStatus)
		@grd3: inBetweenFloorStatus (c) = INBETWEENFLOOR
	then
		@act1: inBetweenFloorStatus (c) ≔ ATFLOOR
	end

	event CabinLeavesFloorGoingDown
	any
		c
		f
	where
		@grd1: c ∈ cabin
		@grd2: c ∈ dom (floor)
		@grd3: f ∈ FLOORS
		@grd4: f = floor(c)
		@grd5: f ≠ 0
		@grd6: inBetweenFloorStatus (c) = ATFLOOR
	then
		@act1: floor (c) ≔ f − 1
		// REQ 10 In between leaving a floor (to go up or down) and reaching another floor, a cabin is in between the two floors.
		@act2: inBetweenFloorStatus (c) ≔ INBETWEENFLOOR
	end

	event CabinReachesFloorGoingDown
	any
		c
	where
		@grd1: c ∈ cabin
		@grd2: c ∈ dom (inBetweenFloorStatus)
		@grd3: inBetweenFloorStatus (c) = INBETWEENFLOOR
	then
		@act1: inBetweenFloorStatus (c) ≔ ATFLOOR
	end

	event AddCabin
	any
		c
	where
		@grd1: c ∈ CABINS∖cabin
	then
		@act1: cabin ≔ cabin ∪ {c}
		@act2: floor ≔ floor ∪ {c ↦ 0}
		@act3: inBetweenFloorStatus ≔ inBetweenFloorStatus ∪ {c ↦ ATFLOOR}
	end

	event RemoveCabin
	any
		c
	where
		@grd1: c ∈ cabin
		@grd2: c ∈ dom (floor)
		@grd3: floor (c) = TOP_FLOOR
	then
		@act1: floor ≔ {c} ⩤ floor
		@act2: inBetweenFloorStatus ≔ {c} ⩤ inBetweenFloorStatus
		@act3: cabin ≔ cabin ∖ {c}
	end

end