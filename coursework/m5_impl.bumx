machine m5_impl
refines m4_buttons
sees 
	cabin_context 
	shafts_context
	motors_context
	doors_context
	buttons_context
variables
	cabin
	floor
    inBetweenFloorStatus
    shaft
    floorShaft
    motor
    door
    upButtons
    downButtons
    floorButtons
    upButtonArray
    downButtonArray
    floorButtonArray
invariants
	@typeof_upButtonArray: upButtonArray ∈ 0 ‥ TOP_FLOOR − 1 → BOOL
	@typeof_downButtonArray: downButtonArray ∈  1 ‥ TOP_FLOOR → BOOL
	@typeof_floorButtonArray: floorButtonArray ∈ 0 ‥ TOP_FLOOR → BOOL
	@gluing_upButtons: upButtons = dom(upButtonArray ▷ {TRUE}) // the buttons that are true (requested)
	@gluing_downButtons: downButtons = dom(downButtonArray ▷ {TRUE}) 
	@gluing_floorButtons: floorButtons ∈ cabin ↔ dom(floorButtonArray ▷ {TRUE}) 	

events

	event INITIALISATION 
	then
	  	@init_floor: floor ≔ ∅ 
   	 	@init_cabin: cabin ≔ ∅ 
    	@init_inBetweenFloorStatus: inBetweenFloorStatus ≔ ∅ 
   	 	@init_shaft: shaft ≔ ∅ 
    	@init_floorShaft: floorShaft ≔ ∅ 
    	@init_motor: motor ≔ ∅ 
    	@init_door: door ≔ ∅ 
    	@init_up_buttons: upButtons ≔ ∅
    	@init_down_buttons: downButtons ≔ ∅
    	@init_floor_buttons: floorButtons ≔ ∅
		@init_upButtonArray: upButtonArray ≔ 0 ‥ TOP_FLOOR − 1 × {FALSE} 
		@init_downButtonArray: downButtonArray ≔ 1 ‥ TOP_FLOOR × {FALSE} 
		@init_floorButtonArray: floorButtonArray ≔ 0 ‥ TOP_FLOOR × {FALSE}
	end
	
	
	event CabinLeavesFloorGoingUp extends CabinLeavesFloorGoingUp
	end
	
	event CabinReachesFloorGoingUp extends CabinReachesFloorGoingUp
	end	
	
	event CabinLeavesFloorGoingDown extends  CabinLeavesFloorGoingDown
	end
	
	event CabinReachesFloorGoingDown  extends CabinReachesFloorGoingDown 
	end
	
	event AddCabin extends AddCabin
    end
	
	event RemoveCabin extends RemoveCabin
	end
	
	event CabinUpToDown refines CabinUpToDown
	any
   		c 
    	m 
    	d 
	where
    	@grd1: c ∈ cabin 
    	@grd2: c ∈ dom (shaft) 
    	@grd3: c ∈ dom (floor) 
    	@grd4: shaft (c) = SHAFT_UP 
    	@grd5: floor(c) = TOP_FLOOR 
    	@grd6: (TOP_FLOOR ↦ SHAFT_DOWN) ∉ floorShaft 
    	@grd8: motor(c) = MOTOR_ON 
    	@grd9: c ↦ m ∈ motor 
    	@grd10: d ∈ DOOR_STATUS 
    	@grd11: c ↦ d ∈ door
    	@grd12: (c ↦ floor(c))∈ floorButtons  ∧ floorButtonArray(floor (c)) = FALSE //the current floor is not requested
    	//a floor below the top floor is requested either inside a cabin or from another floor
    	@grd13:  TRUE ∈ floorButtonArray [0‥floor(c)−1]  ∨ TRUE ∈ downButtonArray [1‥floor(c)−1] ∨ TRUE ∈ upButtonArray [0‥floor(c)−1]
	then
   		@act1: shaft (c) ≔ SHAFT_DOWN 
   	 	@act2: floorShaft ≔ ( floorShaft ∖ {floor(c) ↦ SHAFT_UP} ) ∪ ({floor(c) ↦ SHAFT_DOWN}) 
	end
	
	
	event CabinDownToUp refines CabinDownToUp
	any
    	c 
    	m 
    	d 
	where
    	@grd1: c ∈ cabin 
    	@grd2: c ∈ dom (shaft) 
    	@grd3: c ∈ dom (floor) 
    	@grd4: shaft(c) = SHAFT_DOWN 
    	@grd5: floor (c) = 0 
    	@grd6: (0 ↦ SHAFT_UP) ∉ floorShaft 
    	@grd8: motor(c) = MOTOR_ON 
    	@grd9: c ↦ m ∈ motor 
    	@grd10: d ∈ DOOR_STATUS 
    	@grd11: c ↦ d ∈ door 
    	@grd12: (c ↦ floor(c))∈ floorButtons  ∧ floorButtonArray (floor(c)) = FALSE // there are no requests at the current floor
    	//a floor above the bottom is requested either inside a cabin or from another floor
    	@grd13:  TRUE ∈ floorButtonArray [1‥TOP_FLOOR ]  ∨ TRUE ∈ downButtonArray [1‥TOP_FLOOR] ∨ TRUE ∈ upButtonArray [1‥TOP_FLOOR−1]
    	
	then
    	@act1: shaft (c) ≔ SHAFT_UP 
    	@act2: floorShaft ≔ ( floorShaft ∖ {floor(c) ↦ SHAFT_DOWN} ) ∪ ({floor(c) ↦ SHAFT_UP}) 
	end

	
	event MotorStarts refines MotorStarts
	any
    c 
    m 
    d 
	where
    @grd1: c ∈ cabin 
    @grd2: motor(c) = MOTOR_OFF 
    @grd3: inBetweenFloorStatus (c) = ATFLOOR 
    @grd4: c ↦ m ∈ motor 
    @grd5: door(c) = DOOR_CLOSED 
    @grd6: d ∈ DOOR_STATUS 
    @grd7: c ↦ d ∈ door
    // there are no request for this floor from inside the cabin 
   	@grd8: (c ↦ floor(c))∈ floorButtons  ∧ floorButtonArray (floor(c)) = FALSE 
   	@grd9: upButtonArray(floor(c)) = FALSE // there are no requests for this floor from another floor
   	//theres a request to go up
    @grd10: shaft(c) = SHAFT_UP ⇒ TRUE ∈ floorButtonArray[0‥TOP_FLOOR]  ∨ TRUE ∈ upButtonArray[0‥TOP_FLOOR − 1]
    //theres a request to go down
    @grd11: shaft(c) = SHAFT_DOWN ⇒ TRUE ∈ floorButtonArray[0‥TOP_FLOOR] ∨ TRUE ∈ downButtonArray[1‥TOP_FLOOR]
	then
    @act1: motor(c) ≔ MOTOR_ON 
	end
	

	event MotorStopsOnRequest refines  MotorStopsOnRequest
	any
    c 
    m 
    d 
	where
    @grd1: c ∈ cabin 
    @grd2: motor(c) = MOTOR_ON 
    @grd3: inBetweenFloorStatus (c) = ATFLOOR 
    @grd4: c ↦ m ∈ motor 
    @grd5: d ∈ DOOR_STATUS 
    @grd6: c ↦ d ∈ door 
    //current floor button is requested from inside cabin or on outside
    @grd7: shaft(c) = SHAFT_UP ⇒  ((c ↦ floor(c))∈ floorButtons  ∧ floorButtonArray(floor(c)) = TRUE ) ∨ upButtonArray(floor(c)) = TRUE
    @grd8: shaft(c) = SHAFT_DOWN ⇒ ((c ↦ floor(c))∈ floorButtons  ∧ floorButtonArray(floor(c)) = TRUE ) ∨ downButtonArray(floor(c)) = TRUE
	then
    @act1: motor(c) ≔ MOTOR_OFF 
	end

	
	event MotorStopsNoRequest refines MotorStopsNoRequest
	any
    c 
    m 
    d 
	where
    @grd1: c ∈ cabin 
    @grd2: motor(c) = MOTOR_ON 
    @grd3: inBetweenFloorStatus (c) = ATFLOOR 
    @grd4: c ↦ m ∈ motor 
    @grd5: d ∈ DOOR_STATUS 
    @grd6: c ↦ d ∈ door 
    @grd7: shaft(c) = SHAFT_UP ⇒((c ↦ floor(c))∈ floorButtons ∧   TRUE ∉   floorButtonArray [floor(c) + 1‥ TOP_FLOOR]) ∧ TRUE ∉ upButtonArray[floor(c) + 1 ‥ TOP_FLOOR − 1] ∧ TRUE ∉ downButtonArray[floor(c) + 1 ‥ TOP_FLOOR]
    @grd8: shaft(c) = SHAFT_DOWN ⇒ ((c ↦ floor(c))∈ floorButtons ∧ TRUE ∉  floorButtonArray [0‥floor(c) − 1]) ∧ TRUE ∉ upButtonArray[0‥floor(c) − 1] ∧ TRUE ∉ downButtonArray[0‥floor(c) − 1]
	then
    @act1: motor(c) ≔ MOTOR_OFF 
	end
	
	
	event DoorClosedToHalfUp extends DoorClosedToHalfUp	
	end

	
	event DoorClosedToHalfDown extends DoorClosedToHalfDown  
	end

	
	event DoorHalfToOpenUp extends DoorHalfToOpenUp	
	end
	
	
	event DoorHalfToOpenDown extends DoorHalfToOpenDown
	end

	
	event DoorOpenToHalfUp extends DoorOpenToHalfUp
	end
	
	
	event DoorOpenToHalfDown extends DoorOpenToHalfDown
	end
	
	event DoorHalfToClosed extends DoorHalfToClosed 
	end
	
	event UserPressesUpButton extends UserPressesUpButton
	end
	
	event UserPressesDownButton extends UserPressesDownButton
	end
	
	event  UserPressesFloorButton extends UserPressesFloorButton
	end
	
	
end
